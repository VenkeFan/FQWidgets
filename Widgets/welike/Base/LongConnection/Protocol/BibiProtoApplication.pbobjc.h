// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bibi_proto_application.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class MeetingInfo;
@class Member;
@class MessageHeader;
@class MessageHeader_Property;
@class NoticeMessage_Action;
@class NoticeMessage_Condition;
@class NoticeMessage_Condition_Range;
@class Push;
@class SyncDataPacket_DataEntry;
@class SyncDataPacket_SyncMark;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum MessageClassified

/** 消息的分类 */
typedef GPB_ENUM(MessageClassified) {
  /** 点对点消息 */
  MessageClassified_P2P = 0,

  /** 群消息 */
  MessageClassified_Group = 1,

  /** news消息 */
  MessageClassified_News = 2,

  /** 所有的消息类型 拉消息的时候 */
  MessageClassified_All = 99,

  /** 未知 */
  MessageClassified_UnknownMessageClassified = 100,
};

GPBEnumDescriptor *MessageClassified_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL MessageClassified_IsValidValue(int32_t value);

#pragma mark - Enum MaterialSource

/** 素材来源 */
typedef GPB_ENUM(MaterialSource) {
  /** 本地相册 */
  MaterialSource_Albums = 0,

  /** 录制的 */
  MaterialSource_Capture = 1,
  MaterialSource_UnknownMaterialSource = 10,
};

GPBEnumDescriptor *MaterialSource_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL MaterialSource_IsValidValue(int32_t value);

#pragma mark - Enum SerializableType

/** ---------------------------------消息协议-------------------------------------- */
typedef GPB_ENUM(SerializableType) {
  /** Pb的序列化 */
  SerializableType_ProtocolBuffer = 0,

  /** json序列化的方式 */
  SerializableType_Json = 1,
};

GPBEnumDescriptor *SerializableType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SerializableType_IsValidValue(int32_t value);

#pragma mark - Enum MessageHeader_MessageType

/** 消息类型 */
typedef GPB_ENUM(MessageHeader_MessageType) {
  MessageHeader_MessageType_Text = 0,
  MessageHeader_MessageType_Audio = 1,
  MessageHeader_MessageType_Video = 2,
  MessageHeader_MessageType_Pic = 3,
  MessageHeader_MessageType_Emotion = 4,
  MessageHeader_MessageType_Notice = 5,

  /** 未知的 */
  MessageHeader_MessageType_UnknownMessageType = 200,
};

GPBEnumDescriptor *MessageHeader_MessageType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL MessageHeader_MessageType_IsValidValue(int32_t value);

#pragma mark - Enum NoticeMessage_ActionType

typedef GPB_ENUM(NoticeMessage_ActionType) {
  /** 截屏 */
  NoticeMessage_ActionType_ScreenShot = 0,

  /** 保存消息 */
  NoticeMessage_ActionType_SaveMessage = 1,

  /** 对方正在输入动作 */
  NoticeMessage_ActionType_Typing = 2,

  /** 通用的文本 */
  NoticeMessage_ActionType_Normal = 3,

  /** 群相关 */
  NoticeMessage_ActionType_Group = 4,

  /** 黑洞 notice */
  NoticeMessage_ActionType_BlackHole = 5,

  /** 关闭会话 */
  NoticeMessage_ActionType_CleanSession = 6,

  /** 类型 */
  NoticeMessage_ActionType_UnKnownActionType = 1000,
};

GPBEnumDescriptor *NoticeMessage_ActionType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL NoticeMessage_ActionType_IsValidValue(int32_t value);

#pragma mark - Enum NoticeMessage_Condition_Priority

/** 触发优先级 */
typedef GPB_ENUM(NoticeMessage_Condition_Priority) {
  NoticeMessage_Condition_Priority_Time = 1,
  NoticeMessage_Condition_Priority_Count = 2,
  NoticeMessage_Condition_Priority_Deault = 100,
};

GPBEnumDescriptor *NoticeMessage_Condition_Priority_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL NoticeMessage_Condition_Priority_IsValidValue(int32_t value);

#pragma mark - Enum News_NewsType

/** 消息类型 */
typedef GPB_ENUM(News_NewsType) {
  News_NewsType_Follow = 0,
  News_NewsType_UnFollow = 1,
  News_NewsType_Forward = 2,
  News_NewsType_PostMention = 3,
  News_NewsType_CommentMention = 4,
  News_NewsType_ReplyMention = 5,
  News_NewsType_Comment = 6,
  News_NewsType_Reply = 7,
  News_NewsType_PostLike = 8,
  News_NewsType_CommentLike = 9,
  News_NewsType_ReplyLike = 10,
  News_NewsType_SuperLike = 11,
  News_NewsType_ForwardComment = 12,

  /** 未知的类型 */
  News_NewsType_UnknownNewsType = 300,
};

GPBEnumDescriptor *News_NewsType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL News_NewsType_IsValidValue(int32_t value);

#pragma mark - Enum OnlineReq_OnlineStatus

/** 消息类型 */
typedef GPB_ENUM(OnlineReq_OnlineStatus) {
  /** 进入聊天状态 */
  OnlineReq_OnlineStatus_Online = 0,

  /** 准备打开 */
  OnlineReq_OnlineStatus_Offline = 1,

  /** 未知的类型 */
  OnlineReq_OnlineStatus_UnknownNewsType = 300,
};

GPBEnumDescriptor *OnlineReq_OnlineStatus_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL OnlineReq_OnlineStatus_IsValidValue(int32_t value);

#pragma mark - Enum BroadcastReq_BroadcastStatus

/** 消息类型 */
typedef GPB_ENUM(BroadcastReq_BroadcastStatus) {
  /** 打开直播 */
  BroadcastReq_BroadcastStatus_Open = 0,

  /** 关闭直播 */
  BroadcastReq_BroadcastStatus_Close = 1,

  /** 当时online是ready的时候，客户端进来需要发送enter，确定是否正在直播 */
  BroadcastReq_BroadcastStatus_Enter = 2,
  BroadcastReq_BroadcastStatus_UnknownNewsType = 300,
};

GPBEnumDescriptor *BroadcastReq_BroadcastStatus_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL BroadcastReq_BroadcastStatus_IsValidValue(int32_t value);

#pragma mark - BibiProtoApplicationRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface BibiProtoApplicationRoot : GPBRootObject
@end

#pragma mark - MessageHeader

typedef GPB_ENUM(MessageHeader_FieldNumber) {
  MessageHeader_FieldNumber_MessageId = 1,
  MessageHeader_FieldNumber_Classified = 2,
  MessageHeader_FieldNumber_FromUid = 3,
  MessageHeader_FieldNumber_RemoteUid = 4,
  MessageHeader_FieldNumber_Createtime = 5,
  MessageHeader_FieldNumber_Type = 6,
  MessageHeader_FieldNumber_Persistent = 7,
  MessageHeader_FieldNumber_SourceHostPort = 8,
  MessageHeader_FieldNumber_ReadTimes = 9,
  MessageHeader_FieldNumber_ExpiredTime = 10,
  MessageHeader_FieldNumber_Reply = 11,
  MessageHeader_FieldNumber_PropertiesArray = 12,
  MessageHeader_FieldNumber_SenderName = 13,
  MessageHeader_FieldNumber_SenderURL = 14,
  MessageHeader_FieldNumber_GroupName = 15,
  MessageHeader_FieldNumber_GroupURL = 16,
  MessageHeader_FieldNumber_EnableChat = 17,
  MessageHeader_FieldNumber_VisableChat = 18,
  MessageHeader_FieldNumber_IsGreet = 19,
};

/**
 * 消息头部
 **/
@interface MessageHeader : GPBMessage

/** 消息ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *messageId;
/** Test to see if @c messageId has been set. */
@property(nonatomic, readwrite) BOOL hasMessageId;

/** 消息分类 */
@property(nonatomic, readwrite) MessageClassified classified;

@property(nonatomic, readwrite) BOOL hasClassified;
/** 消息发送方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fromUid;
/** Test to see if @c fromUid has been set. */
@property(nonatomic, readwrite) BOOL hasFromUid;

/** 消息的接收方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remoteUid;
/** Test to see if @c remoteUid has been set. */
@property(nonatomic, readwrite) BOOL hasRemoteUid;

/** 消息创建时间 */
@property(nonatomic, readwrite) int64_t createtime;

@property(nonatomic, readwrite) BOOL hasCreatetime;
/** 消息类型 */
@property(nonatomic, readwrite) MessageHeader_MessageType type;

@property(nonatomic, readwrite) BOOL hasType;
/** 消息是否需要持久化 */
@property(nonatomic, readwrite) BOOL persistent;

@property(nonatomic, readwrite) BOOL hasPersistent;
/** 消息发送来源的IP:Port */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sourceHostPort;
/** Test to see if @c sourceHostPort has been set. */
@property(nonatomic, readwrite) BOOL hasSourceHostPort;

/** 消息阅读的次数 */
@property(nonatomic, readwrite) int32_t readTimes;

@property(nonatomic, readwrite) BOOL hasReadTimes;
/** 消息过期时间即最晚阅读时间 */
@property(nonatomic, readwrite) int64_t expiredTime;

@property(nonatomic, readwrite) BOOL hasExpiredTime;
/** 是否需要reply */
@property(nonatomic, readwrite) BOOL reply;

@property(nonatomic, readwrite) BOOL hasReply;
/**
 * key:value:[notice_save_message.status : save,cancel] [relation : follow,fans,both,none,block][group_quit_uid : uid]
 * key:value[notice_save_from_id:fromId][notice_save_to_id:toId] 当操作save notice的时候 需要设置要保存的消息的fromId toId
 * key:value[group.eventType: create、join、kick、disband、quit] [group.remoteIds:字符串json]
 * key:value[add_friend_action:agree]
 * key:value[msg.style:"拍摄图片等右侧文案"]
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<MessageHeader_Property*> *propertiesArray;
/** The number of items in @c propertiesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger propertiesArray_Count;

/** 发送者名字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *senderName;
/** Test to see if @c senderName has been set. */
@property(nonatomic, readwrite) BOOL hasSenderName;

/** 发送者头像 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *senderURL;
/** Test to see if @c senderURL has been set. */
@property(nonatomic, readwrite) BOOL hasSenderURL;

/** 群名字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupName;
/** Test to see if @c groupName has been set. */
@property(nonatomic, readwrite) BOOL hasGroupName;

/** 群名字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupURL;
/** Test to see if @c groupURL has been set. */
@property(nonatomic, readwrite) BOOL hasGroupURL;

@property(nonatomic, readwrite) BOOL enableChat;

@property(nonatomic, readwrite) BOOL hasEnableChat;
@property(nonatomic, readwrite) BOOL visableChat;

@property(nonatomic, readwrite) BOOL hasVisableChat;
@property(nonatomic, readwrite) BOOL isGreet;

@property(nonatomic, readwrite) BOOL hasIsGreet;
@end

#pragma mark - MessageHeader_Property

typedef GPB_ENUM(MessageHeader_Property_FieldNumber) {
  MessageHeader_Property_FieldNumber_Key = 1,
  MessageHeader_Property_FieldNumber_Value = 2,
};

/**
 * 消息头部的属性
 **/
@interface MessageHeader_Property : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;

@property(nonatomic, readwrite, copy, null_resettable) NSString *value;
/** Test to see if @c value has been set. */
@property(nonatomic, readwrite) BOOL hasValue;

@end

#pragma mark - TextMessage

typedef GPB_ENUM(TextMessage_FieldNumber) {
  TextMessage_FieldNumber_Header = 1,
  TextMessage_FieldNumber_Text = 2,
};

/**
 * 文本消息
 **/
@interface TextMessage : GPBMessage

/** 消息头部信息 */
@property(nonatomic, readwrite, strong, null_resettable) MessageHeader *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

/** 消息体 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;
/** Test to see if @c text has been set. */
@property(nonatomic, readwrite) BOOL hasText;

@end

#pragma mark - AudioMessage

typedef GPB_ENUM(AudioMessage_FieldNumber) {
  AudioMessage_FieldNumber_Header = 1,
  AudioMessage_FieldNumber_RecordSeconds = 2,
  AudioMessage_FieldNumber_AudioUri = 3,
};

/**
 * 语言消息
 **/
@interface AudioMessage : GPBMessage

/** 消息头部信息 */
@property(nonatomic, readwrite, strong, null_resettable) MessageHeader *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

/** 语音的录制时长 */
@property(nonatomic, readwrite) int32_t recordSeconds;

@property(nonatomic, readwrite) BOOL hasRecordSeconds;
/** 语音的uri */
@property(nonatomic, readwrite, copy, null_resettable) NSString *audioUri;
/** Test to see if @c audioUri has been set. */
@property(nonatomic, readwrite) BOOL hasAudioUri;

@end

#pragma mark - VideoMessage

typedef GPB_ENUM(VideoMessage_FieldNumber) {
  VideoMessage_FieldNumber_Header = 1,
  VideoMessage_FieldNumber_Source = 2,
  VideoMessage_FieldNumber_VideoCover = 3,
  VideoMessage_FieldNumber_RecordSeconds = 4,
  VideoMessage_FieldNumber_VideoUri = 5,
  VideoMessage_FieldNumber_Encrypt = 6,
};

/**
 * 视频消息
 **/
@interface VideoMessage : GPBMessage

/** 消息头部信息 */
@property(nonatomic, readwrite, strong, null_resettable) MessageHeader *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

@property(nonatomic, readwrite) MaterialSource source;

@property(nonatomic, readwrite) BOOL hasSource;
/** 视频的封面 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *videoCover;
/** Test to see if @c videoCover has been set. */
@property(nonatomic, readwrite) BOOL hasVideoCover;

/** 语音的录制时长 */
@property(nonatomic, readwrite) int32_t recordSeconds;

@property(nonatomic, readwrite) BOOL hasRecordSeconds;
/** 语音的uri */
@property(nonatomic, readwrite, copy, null_resettable) NSString *videoUri;
/** Test to see if @c videoUri has been set. */
@property(nonatomic, readwrite) BOOL hasVideoUri;

/** 需要密码查看 true 不需要false 默认false */
@property(nonatomic, readwrite) BOOL encrypt;

@property(nonatomic, readwrite) BOOL hasEncrypt;
@end

#pragma mark - PicMessage

typedef GPB_ENUM(PicMessage_FieldNumber) {
  PicMessage_FieldNumber_Header = 1,
  PicMessage_FieldNumber_Source = 2,
  PicMessage_FieldNumber_CoverUri = 3,
  PicMessage_FieldNumber_PicUri = 4,
  PicMessage_FieldNumber_Encrypt = 5,
};

/**
 * 图片消息
 **/
@interface PicMessage : GPBMessage

/** 消息头部信息 */
@property(nonatomic, readwrite, strong, null_resettable) MessageHeader *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

@property(nonatomic, readwrite) MaterialSource source;

@property(nonatomic, readwrite) BOOL hasSource;
/** 图片缩略图 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *coverUri;
/** Test to see if @c coverUri has been set. */
@property(nonatomic, readwrite) BOOL hasCoverUri;

/** 语音的uri */
@property(nonatomic, readwrite, copy, null_resettable) NSString *picUri;
/** Test to see if @c picUri has been set. */
@property(nonatomic, readwrite) BOOL hasPicUri;

/** 需要密码查看 true 不需要false 默认false */
@property(nonatomic, readwrite) BOOL encrypt;

@property(nonatomic, readwrite) BOOL hasEncrypt;
@end

#pragma mark - EmotionMessage

typedef GPB_ENUM(EmotionMessage_FieldNumber) {
  EmotionMessage_FieldNumber_Header = 1,
  EmotionMessage_FieldNumber_EmotionURL = 2,
  EmotionMessage_FieldNumber_EmotionId = 3,
};

/**
 * 表情消息,外部来源
 **/
@interface EmotionMessage : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) MessageHeader *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

@property(nonatomic, readwrite, copy, null_resettable) NSString *emotionURL;
/** Test to see if @c emotionURL has been set. */
@property(nonatomic, readwrite) BOOL hasEmotionURL;

/** 表情连接 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *emotionId;
/** Test to see if @c emotionId has been set. */
@property(nonatomic, readwrite) BOOL hasEmotionId;

@end

#pragma mark - NoticeMessage

typedef GPB_ENUM(NoticeMessage_FieldNumber) {
  NoticeMessage_FieldNumber_Header = 1,
  NoticeMessage_FieldNumber_ReferenceMsgId = 2,
  NoticeMessage_FieldNumber_ReferenceTime = 3,
  NoticeMessage_FieldNumber_ActionsArray = 4,
  NoticeMessage_FieldNumber_ActionType = 5,
  NoticeMessage_FieldNumber_Condition = 6,
};

/**
 * notice消息
 **/
@interface NoticeMessage : GPBMessage

/** 消息头部 */
@property(nonatomic, readwrite, strong, null_resettable) MessageHeader *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

/** 参考的消息ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *referenceMsgId;
/** Test to see if @c referenceMsgId has been set. */
@property(nonatomic, readwrite) BOOL hasReferenceMsgId;

/** 参考的消息ID */
@property(nonatomic, readwrite) int64_t referenceTime;

@property(nonatomic, readwrite) BOOL hasReferenceTime;
/** notice消息 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NoticeMessage_Action*> *actionsArray;
/** The number of items in @c actionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger actionsArray_Count;

/** notice类型 */
@property(nonatomic, readwrite) NoticeMessage_ActionType actionType;

@property(nonatomic, readwrite) BOOL hasActionType;
/** 触发Notice的条件 */
@property(nonatomic, readwrite, strong, null_resettable) NoticeMessage_Condition *condition;
/** Test to see if @c condition has been set. */
@property(nonatomic, readwrite) BOOL hasCondition;

@end

#pragma mark - NoticeMessage_Action

typedef GPB_ENUM(NoticeMessage_Action_FieldNumber) {
  NoticeMessage_Action_FieldNumber_Text = 1,
  NoticeMessage_Action_FieldNumber_URL = 2,
  NoticeMessage_Action_FieldNumber_LocKey = 3,
};

/**
 * 内部的动态
 **/
@interface NoticeMessage_Action : GPBMessage

/** action的文本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;
/** Test to see if @c text has been set. */
@property(nonatomic, readwrite) BOOL hasText;

/** 消息的url 支持http:// go://main?parameter=value 协议 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;
/** Test to see if @c URL has been set. */
@property(nonatomic, readwrite) BOOL hasURL;

/** locKey://name?uid=10006 符合restful接口 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *locKey;
/** Test to see if @c locKey has been set. */
@property(nonatomic, readwrite) BOOL hasLocKey;

@end

#pragma mark - NoticeMessage_Condition

typedef GPB_ENUM(NoticeMessage_Condition_FieldNumber) {
  NoticeMessage_Condition_FieldNumber_RangeArray = 1,
  NoticeMessage_Condition_FieldNumber_UserLevel = 2,
  NoticeMessage_Condition_FieldNumber_Priority = 3,
};

/**
 * 黑洞的触发条件
 **/
@interface NoticeMessage_Condition : GPBMessage

/** 黑洞触发范围 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NoticeMessage_Condition_Range*> *rangeArray;
/** The number of items in @c rangeArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger rangeArray_Count;

/** 用户等级,也许根据不同的等级触发效果不一样 */
@property(nonatomic, readwrite) int32_t userLevel;

@property(nonatomic, readwrite) BOOL hasUserLevel;
/** 条件优先级 */
@property(nonatomic, readwrite) NoticeMessage_Condition_Priority priority;

@property(nonatomic, readwrite) BOOL hasPriority;
@end

#pragma mark - NoticeMessage_Condition_Range

typedef GPB_ENUM(NoticeMessage_Condition_Range_FieldNumber) {
  NoticeMessage_Condition_Range_FieldNumber_StartMessageId = 1,
  NoticeMessage_Condition_Range_FieldNumber_StartCreateTime = 2,
  NoticeMessage_Condition_Range_FieldNumber_EndMessageId = 3,
  NoticeMessage_Condition_Range_FieldNumber_EndCreateTime = 4,
  NoticeMessage_Condition_Range_FieldNumber_MatchedCount = 5,
};

/**
 * 区间
 **/
@interface NoticeMessage_Condition_Range : GPBMessage

/** 起始消息的ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *startMessageId;
/** Test to see if @c startMessageId has been set. */
@property(nonatomic, readwrite) BOOL hasStartMessageId;

/** 起始消息的时间 */
@property(nonatomic, readwrite) int64_t startCreateTime;

@property(nonatomic, readwrite) BOOL hasStartCreateTime;
/** 结束消息的ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *endMessageId;
/** Test to see if @c endMessageId has been set. */
@property(nonatomic, readwrite) BOOL hasEndMessageId;

/** 结束消息的时间 */
@property(nonatomic, readwrite) int64_t endCreateTime;

@property(nonatomic, readwrite) BOOL hasEndCreateTime;
/** 满足条件的数量 */
@property(nonatomic, readwrite) int32_t matchedCount;

@property(nonatomic, readwrite) BOOL hasMatchedCount;
@end

#pragma mark - SyncPacket

typedef GPB_ENUM(SyncPacket_FieldNumber) {
  SyncPacket_FieldNumber_FromUid = 1,
  SyncPacket_FieldNumber_SeqId = 2,
  SyncPacket_FieldNumber_ClassifiedArray = 3,
};

/**
 * 用户发起Syn包
 **/
@interface SyncPacket : GPBMessage

/** 需要sync的用户Uid */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fromUid;
/** Test to see if @c fromUid has been set. */
@property(nonatomic, readwrite) BOOL hasFromUid;

/** sync包发起序号 */
@property(nonatomic, readwrite) int64_t seqId;

@property(nonatomic, readwrite) BOOL hasSeqId;
/** 本次发起sync的类型 */
// |classifiedArray| contains |MessageClassified|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *classifiedArray;
/** The number of items in @c classifiedArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger classifiedArray_Count;

@end

#pragma mark - SyncDataPacket

typedef GPB_ENUM(SyncDataPacket_FieldNumber) {
  SyncDataPacket_FieldNumber_RemoteUid = 1,
  SyncDataPacket_FieldNumber_SyncMarksArray = 2,
  SyncDataPacket_FieldNumber_SerilizableType = 3,
  SyncDataPacket_FieldNumber_HasMore = 4,
  SyncDataPacket_FieldNumber_DataArray = 5,
  SyncDataPacket_FieldNumber_SendTime = 6,
};

/**
 * 用户发送的sync包返回的sync数据
 **/
@interface SyncDataPacket : GPBMessage

/** 发送给目标用户的Uid */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remoteUid;
/** Test to see if @c remoteUid has been set. */
@property(nonatomic, readwrite) BOOL hasRemoteUid;

/** 当前sync的mark标识 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SyncDataPacket_SyncMark*> *syncMarksArray;
/** The number of items in @c syncMarksArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger syncMarksArray_Count;

/** 当前sync出来的数据采用的序列化方式 */
@property(nonatomic, readwrite) SerializableType serilizableType;

@property(nonatomic, readwrite) BOOL hasSerilizableType;
/** 是否还有更多数据包，需要客户端再次发出sync命令 */
@property(nonatomic, readwrite) BOOL hasMore;

@property(nonatomic, readwrite) BOOL hasHasMore;
/** 最终序列化后的数据 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SyncDataPacket_DataEntry*> *dataArray;
/** The number of items in @c dataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dataArray_Count;

/** 服务器发送时间 */
@property(nonatomic, readwrite) int64_t sendTime;

@property(nonatomic, readwrite) BOOL hasSendTime;
@end

#pragma mark - SyncDataPacket_SyncMark

typedef GPB_ENUM(SyncDataPacket_SyncMark_FieldNumber) {
  SyncDataPacket_SyncMark_FieldNumber_Classified = 1,
  SyncDataPacket_SyncMark_FieldNumber_LastVersion = 2,
  SyncDataPacket_SyncMark_FieldNumber_TargetId = 3,
};

/**
 * sync包
 **/
@interface SyncDataPacket_SyncMark : GPBMessage

/** 消息分类 */
@property(nonatomic, readwrite) MessageClassified classified;

@property(nonatomic, readwrite) BOOL hasClassified;
/** 当前包的最大消息版本号 之后会删掉 */
@property(nonatomic, readwrite) int64_t lastVersion;

@property(nonatomic, readwrite) BOOL hasLastVersion;
/** 群id 或者friendId */
@property(nonatomic, readwrite, copy, null_resettable) NSString *targetId;
/** Test to see if @c targetId has been set. */
@property(nonatomic, readwrite) BOOL hasTargetId;

@end

#pragma mark - SyncDataPacket_DataEntry

typedef GPB_ENUM(SyncDataPacket_DataEntry_FieldNumber) {
  SyncDataPacket_DataEntry_FieldNumber_Classified = 1,
  SyncDataPacket_DataEntry_FieldNumber_Type = 2,
  SyncDataPacket_DataEntry_FieldNumber_Body = 3,
};

/**
 * 数据体
 **/
@interface SyncDataPacket_DataEntry : GPBMessage

@property(nonatomic, readwrite) MessageClassified classified;

@property(nonatomic, readwrite) BOOL hasClassified;
/** 客户端直接根据bibipackettype分辨 */
@property(nonatomic, readwrite) int32_t type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, copy, null_resettable) NSData *body;
/** Test to see if @c body has been set. */
@property(nonatomic, readwrite) BOOL hasBody;

@end

#pragma mark - SyncDataFin

typedef GPB_ENUM(SyncDataFin_FieldNumber) {
  SyncDataFin_FieldNumber_SyncMarksArray = 1,
  SyncDataFin_FieldNumber_SendTime = 2,
};

/**
 * 客户端回馈的消息接受完毕
 **/
@interface SyncDataFin : GPBMessage

/** sync标识 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SyncDataPacket_SyncMark*> *syncMarksArray;
/** The number of items in @c syncMarksArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger syncMarksArray_Count;

/** 服务器发送时间 */
@property(nonatomic, readwrite) int64_t sendTime;

@property(nonatomic, readwrite) BOOL hasSendTime;
@end

#pragma mark - SyncDataFinAck

typedef GPB_ENUM(SyncDataFinAck_FieldNumber) {
  SyncDataFinAck_FieldNumber_AckFinId = 1,
};

/**
 * 服务端返回给客户端消息送达fin标识确认
 * 相当于确认了消息已经送达并且，fin的标识也已经送达到server端
 **/
@interface SyncDataFinAck : GPBMessage

/** SyncDataFin发来的标识 */
@property(nonatomic, readwrite) int64_t ackFinId;

@property(nonatomic, readwrite) BOOL hasAckFinId;
@end

#pragma mark - NewMessageNotify

typedef GPB_ENUM(NewMessageNotify_FieldNumber) {
  NewMessageNotify_FieldNumber_ClassifiedArray = 1,
};

/**
 * 新消息提醒
 **/
@interface NewMessageNotify : GPBMessage

/** 消息分类 */
// |classifiedArray| contains |MessageClassified|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *classifiedArray;
/** The number of items in @c classifiedArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger classifiedArray_Count;

@end

#pragma mark - MessageArrivalAck

typedef GPB_ENUM(MessageArrivalAck_FieldNumber) {
  MessageArrivalAck_FieldNumber_Header = 1,
  MessageArrivalAck_FieldNumber_Code = 2,
  MessageArrivalAck_FieldNumber_Feedback = 3,
  MessageArrivalAck_FieldNumber_ClientTime = 4,
};

/**
 * 消息送达确认
 **/
@interface MessageArrivalAck : GPBMessage

/** 消息送达确认返回消息头部信息，也许可以根据服务端返回的属性。重新设置消息在客户端的属性 */
@property(nonatomic, readwrite, strong, null_resettable) MessageHeader *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

/** 11200:发送成功; 11401:发送失败，服务器异常;11402:发送失败，对方不是好友 11403:发送失败 不是群成员 */
@property(nonatomic, readwrite) int32_t code;

@property(nonatomic, readwrite) BOOL hasCode;
@property(nonatomic, readwrite, copy, null_resettable) NSString *feedback;
/** Test to see if @c feedback has been set. */
@property(nonatomic, readwrite) BOOL hasFeedback;

/** 客户端消息创建时间 */
@property(nonatomic, readwrite) int64_t clientTime;

@property(nonatomic, readwrite) BOOL hasClientTime;
@end

#pragma mark - MessageRead

typedef GPB_ENUM(MessageRead_FieldNumber) {
  MessageRead_FieldNumber_Classified = 1,
  MessageRead_FieldNumber_FromUid = 2,
  MessageRead_FieldNumber_RemoteUid = 3,
  MessageRead_FieldNumber_ReadMessageIdsArray = 4,
  MessageRead_FieldNumber_UnreadCount = 5,
  MessageRead_FieldNumber_ReadId = 6,
  MessageRead_FieldNumber_GroupUnreadCount = 7,
  MessageRead_FieldNumber_NewsUnreadCount = 8,
};

/**
 * 消息已读
 **/
@interface MessageRead : GPBMessage

/** 消息业务类型 */
@property(nonatomic, readwrite) MessageClassified classified;

@property(nonatomic, readwrite) BOOL hasClassified;
/** 消息发送方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fromUid;
/** Test to see if @c fromUid has been set. */
@property(nonatomic, readwrite) BOOL hasFromUid;

/** 消息的接收方的 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remoteUid;
/** Test to see if @c remoteUid has been set. */
@property(nonatomic, readwrite) BOOL hasRemoteUid;

/** 已读消息ID的列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *readMessageIdsArray;
/** The number of items in @c readMessageIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger readMessageIdsArray_Count;

/** 单聊未读消息数量 */
@property(nonatomic, readwrite) int32_t unreadCount;

@property(nonatomic, readwrite) BOOL hasUnreadCount;
/** 协议唯一标识 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *readId;
/** Test to see if @c readId has been set. */
@property(nonatomic, readwrite) BOOL hasReadId;

/** 群聊未读消息数量 */
@property(nonatomic, readwrite) int32_t groupUnreadCount;

@property(nonatomic, readwrite) BOOL hasGroupUnreadCount;
/** news未读消息数量 */
@property(nonatomic, readwrite) int32_t newsUnreadCount;

@property(nonatomic, readwrite) BOOL hasNewsUnreadCount;
@end

#pragma mark - MessageReadAck

typedef GPB_ENUM(MessageReadAck_FieldNumber) {
  MessageReadAck_FieldNumber_Classified = 1,
  MessageReadAck_FieldNumber_FromUid = 2,
  MessageReadAck_FieldNumber_RemoteUid = 3,
  MessageReadAck_FieldNumber_ReadMessageIdsArray = 4,
  MessageReadAck_FieldNumber_ReadId = 5,
};

/**
 * 消息已读确认
 **/
@interface MessageReadAck : GPBMessage

/** 消息业务类型 */
@property(nonatomic, readwrite) MessageClassified classified;

@property(nonatomic, readwrite) BOOL hasClassified;
/** 消息发送方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fromUid;
/** Test to see if @c fromUid has been set. */
@property(nonatomic, readwrite) BOOL hasFromUid;

/** 消息的接收方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remoteUid;
/** Test to see if @c remoteUid has been set. */
@property(nonatomic, readwrite) BOOL hasRemoteUid;

/** 已读消息ID的列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *readMessageIdsArray;
/** The number of items in @c readMessageIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger readMessageIdsArray_Count;

/** 协议唯一标识 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *readId;
/** Test to see if @c readId has been set. */
@property(nonatomic, readwrite) BOOL hasReadId;

@end

#pragma mark - News

typedef GPB_ENUM(News_FieldNumber) {
  News_FieldNumber_Text = 1,
  News_FieldNumber_FromUid = 2,
  News_FieldNumber_RemoteUid = 3,
  News_FieldNumber_NewsType = 4,
  News_FieldNumber_Classified = 5,
  News_FieldNumber_Push = 6,
};

/**
 * 代发消息
 **/
@interface News : GPBMessage

/** 代发消息结构体，api和客户端协商 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;
/** Test to see if @c text has been set. */
@property(nonatomic, readwrite) BOOL hasText;

/** 消息的接收方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fromUid;
/** Test to see if @c fromUid has been set. */
@property(nonatomic, readwrite) BOOL hasFromUid;

/** 消息的接收方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remoteUid;
/** Test to see if @c remoteUid has been set. */
@property(nonatomic, readwrite) BOOL hasRemoteUid;

/** 代发消息类型 */
@property(nonatomic, readwrite) News_NewsType newsType;

@property(nonatomic, readwrite) BOOL hasNewsType;
/** 消息业务类型 */
@property(nonatomic, readwrite) MessageClassified classified;

@property(nonatomic, readwrite) BOOL hasClassified;
/** 如果有push pushtitle */
@property(nonatomic, readwrite, strong, null_resettable) Push *push;
/** Test to see if @c push has been set. */
@property(nonatomic, readwrite) BOOL hasPush;

@end

#pragma mark - Push

typedef GPB_ENUM(Push_FieldNumber) {
  Push_FieldNumber_PushContent = 1,
  Push_FieldNumber_PushTitle = 2,
  Push_FieldNumber_PushIcon = 3,
  Push_FieldNumber_PushUserName = 4,
  Push_FieldNumber_PushAvatarURL = 5,
  Push_FieldNumber_PushForwardURL = 6,
  Push_FieldNumber_PushType = 7,
};

/**
 * 会议主持人
 **/
@interface Push : GPBMessage

/** push内容 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pushContent;
/** Test to see if @c pushContent has been set. */
@property(nonatomic, readwrite) BOOL hasPushContent;

/** pushtitle */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pushTitle;
/** Test to see if @c pushTitle has been set. */
@property(nonatomic, readwrite) BOOL hasPushTitle;

/** push icon */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pushIcon;
/** Test to see if @c pushIcon has been set. */
@property(nonatomic, readwrite) BOOL hasPushIcon;

/** push icon */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pushUserName;
/** Test to see if @c pushUserName has been set. */
@property(nonatomic, readwrite) BOOL hasPushUserName;

/** push icon */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pushAvatarURL;
/** Test to see if @c pushAvatarURL has been set. */
@property(nonatomic, readwrite) BOOL hasPushAvatarURL;

/** push icon */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pushForwardURL;
/** Test to see if @c pushForwardURL has been set. */
@property(nonatomic, readwrite) BOOL hasPushForwardURL;

/** push icon */
@property(nonatomic, readwrite) int32_t pushType;

@property(nonatomic, readwrite) BOOL hasPushType;
@end

#pragma mark - MeetingInfo

typedef GPB_ENUM(MeetingInfo_FieldNumber) {
  MeetingInfo_FieldNumber_HostId = 1,
  MeetingInfo_FieldNumber_MeetingId = 2,
  MeetingInfo_FieldNumber_OpenId = 3,
};

/**
 * 会议主持人
 **/
@interface MeetingInfo : GPBMessage

/** 视频主持人ID用户UID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *hostId;
/** Test to see if @c hostId has been set. */
@property(nonatomic, readwrite) BOOL hasHostId;

/** 视频会议ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *meetingId;
/** Test to see if @c meetingId has been set. */
@property(nonatomic, readwrite) BOOL hasMeetingId;

/** 视频账号openID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *openId;
/** Test to see if @c openId has been set. */
@property(nonatomic, readwrite) BOOL hasOpenId;

@end

#pragma mark - OnlineReq

typedef GPB_ENUM(OnlineReq_FieldNumber) {
  OnlineReq_FieldNumber_FromUid = 1,
  OnlineReq_FieldNumber_RemoteUid = 2,
  OnlineReq_FieldNumber_ViewTarget = 3,
  OnlineReq_FieldNumber_Classified = 4,
  OnlineReq_FieldNumber_Status = 5,
  OnlineReq_FieldNumber_RequestId = 6,
};

/**
 * 在线状态
 **/
@interface OnlineReq : GPBMessage

/** 消息的发送方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fromUid;
/** Test to see if @c fromUid has been set. */
@property(nonatomic, readwrite) BOOL hasFromUid;

/** 消息的接收方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remoteUid;
/** Test to see if @c remoteUid has been set. */
@property(nonatomic, readwrite) BOOL hasRemoteUid;

/** 当前所在界面的Id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *viewTarget;
/** Test to see if @c viewTarget has been set. */
@property(nonatomic, readwrite) BOOL hasViewTarget;

/** 当前请求类型是群组还是个人 */
@property(nonatomic, readwrite) MessageClassified classified;

@property(nonatomic, readwrite) BOOL hasClassified;
/** online状态 */
@property(nonatomic, readwrite) OnlineReq_OnlineStatus status;

@property(nonatomic, readwrite) BOOL hasStatus;
/** 请求的标识 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *requestId;
/** Test to see if @c requestId has been set. */
@property(nonatomic, readwrite) BOOL hasRequestId;

@end

#pragma mark - OnlineReqAck

typedef GPB_ENUM(OnlineReqAck_FieldNumber) {
  OnlineReqAck_FieldNumber_Code = 1,
  OnlineReqAck_FieldNumber_FromUid = 2,
  OnlineReqAck_FieldNumber_RemoteUid = 3,
  OnlineReqAck_FieldNumber_Feedback = 4,
  OnlineReqAck_FieldNumber_Classified = 5,
  OnlineReqAck_FieldNumber_MemberIdsArray = 6,
  OnlineReqAck_FieldNumber_RequestId = 7,
};

/**
 * 视频请求返回 如果b不在线 直接返回
 **/
@interface OnlineReqAck : GPBMessage

@property(nonatomic, readwrite) int32_t code;

@property(nonatomic, readwrite) BOOL hasCode;
/** 消息的发送方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fromUid;
/** Test to see if @c fromUid has been set. */
@property(nonatomic, readwrite) BOOL hasFromUid;

/** 消息的接收方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remoteUid;
/** Test to see if @c remoteUid has been set. */
@property(nonatomic, readwrite) BOOL hasRemoteUid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *feedback;
/** Test to see if @c feedback has been set. */
@property(nonatomic, readwrite) BOOL hasFeedback;

/** 当前请求类型是群组还是个人 */
@property(nonatomic, readwrite) MessageClassified classified;

@property(nonatomic, readwrite) BOOL hasClassified;
/** 成员id列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Member*> *memberIdsArray;
/** The number of items in @c memberIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger memberIdsArray_Count;

/** 请求的标识 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *requestId;
/** Test to see if @c requestId has been set. */
@property(nonatomic, readwrite) BOOL hasRequestId;

@end

#pragma mark - Member

typedef GPB_ENUM(Member_FieldNumber) {
  Member_FieldNumber_MemberId = 1,
};

@interface Member : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *memberId;
/** Test to see if @c memberId has been set. */
@property(nonatomic, readwrite) BOOL hasMemberId;

@end

#pragma mark - BroadcastReq

typedef GPB_ENUM(BroadcastReq_FieldNumber) {
  BroadcastReq_FieldNumber_FromUid = 1,
  BroadcastReq_FieldNumber_RemoteUid = 2,
  BroadcastReq_FieldNumber_ViewTarget = 3,
  BroadcastReq_FieldNumber_Classified = 4,
  BroadcastReq_FieldNumber_Status = 5,
  BroadcastReq_FieldNumber_RequestId = 6,
  BroadcastReq_FieldNumber_Info = 7,
  BroadcastReq_FieldNumber_BroadcastId = 8,
};

/**
 * 直播协议
 **/
@interface BroadcastReq : GPBMessage

/** 消息的发送方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fromUid;
/** Test to see if @c fromUid has been set. */
@property(nonatomic, readwrite) BOOL hasFromUid;

/** 消息的接收方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remoteUid;
/** Test to see if @c remoteUid has been set. */
@property(nonatomic, readwrite) BOOL hasRemoteUid;

/** 当前所在界面的Id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *viewTarget;
/** Test to see if @c viewTarget has been set. */
@property(nonatomic, readwrite) BOOL hasViewTarget;

/** 当前请求类型是群组还是个人 */
@property(nonatomic, readwrite) MessageClassified classified;

@property(nonatomic, readwrite) BOOL hasClassified;
/** online状态 */
@property(nonatomic, readwrite) BroadcastReq_BroadcastStatus status;

@property(nonatomic, readwrite) BOOL hasStatus;
/** 请求的标识 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *requestId;
/** Test to see if @c requestId has been set. */
@property(nonatomic, readwrite) BOOL hasRequestId;

@property(nonatomic, readwrite, strong, null_resettable) MeetingInfo *info;
/** Test to see if @c info has been set. */
@property(nonatomic, readwrite) BOOL hasInfo;

/** 直播id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *broadcastId;
/** Test to see if @c broadcastId has been set. */
@property(nonatomic, readwrite) BOOL hasBroadcastId;

@end

#pragma mark - BroadcastReqAck

typedef GPB_ENUM(BroadcastReqAck_FieldNumber) {
  BroadcastReqAck_FieldNumber_Code = 1,
  BroadcastReqAck_FieldNumber_FromUid = 2,
  BroadcastReqAck_FieldNumber_RemoteUid = 3,
  BroadcastReqAck_FieldNumber_Feedback = 4,
  BroadcastReqAck_FieldNumber_Classified = 5,
  BroadcastReqAck_FieldNumber_MeetingInfo = 6,
  BroadcastReqAck_FieldNumber_RequestId = 7,
};

/**
 * 直播协议ack
 **/
@interface BroadcastReqAck : GPBMessage

@property(nonatomic, readwrite) int32_t code;

@property(nonatomic, readwrite) BOOL hasCode;
/** 消息的发送方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fromUid;
/** Test to see if @c fromUid has been set. */
@property(nonatomic, readwrite) BOOL hasFromUid;

/** 消息的接收方 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remoteUid;
/** Test to see if @c remoteUid has been set. */
@property(nonatomic, readwrite) BOOL hasRemoteUid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *feedback;
/** Test to see if @c feedback has been set. */
@property(nonatomic, readwrite) BOOL hasFeedback;

/** 当前请求类型是群组还是个人 */
@property(nonatomic, readwrite) MessageClassified classified;

@property(nonatomic, readwrite) BOOL hasClassified;
/** 当前用户视频的信息 */
@property(nonatomic, readwrite, strong, null_resettable) MeetingInfo *meetingInfo;
/** Test to see if @c meetingInfo has been set. */
@property(nonatomic, readwrite) BOOL hasMeetingInfo;

/** 请求的标识 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *requestId;
/** Test to see if @c requestId has been set. */
@property(nonatomic, readwrite) BOOL hasRequestId;

@end

#pragma mark - MessageRecalled

typedef GPB_ENUM(MessageRecalled_FieldNumber) {
  MessageRecalled_FieldNumber_Header = 1,
  MessageRecalled_FieldNumber_RefHeaderArray = 2,
};

/**
 * moment 消息撤回协议
 **/
@interface MessageRecalled : GPBMessage

/** 消息id */
@property(nonatomic, readwrite, strong, null_resettable) MessageHeader *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

/** 消息id */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<MessageHeader*> *refHeaderArray;
/** The number of items in @c refHeaderArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger refHeaderArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
