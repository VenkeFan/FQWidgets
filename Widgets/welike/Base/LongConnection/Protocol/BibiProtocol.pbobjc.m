// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bibi_protocol.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "BibiProtocol.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BibiProtocolRoot

@implementation BibiProtocolRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - BibiProtocolRoot_FileDescriptor

static GPBFileDescriptor *BibiProtocolRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protoc"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum NetType

GPBEnumDescriptor *NetType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Wifi\000Wlan2G\000Wlan3G\000Wlan4G\000Unreac"
        "hable\000";
    static const int32_t values[] = {
        NetType_Unknown,
        NetType_Wifi,
        NetType_Wlan2G,
        NetType_Wlan3G,
        NetType_Wlan4G,
        NetType_Unreachable,
    };
    static const char *extraTextFormatInfo = "\005\000\007\000\002d\202\000\003d\202\000\004d\202\000\005\013\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(NetType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:NetType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL NetType_IsValidValue(int32_t value__) {
  switch (value__) {
    case NetType_Unknown:
    case NetType_Wifi:
    case NetType_Wlan2G:
    case NetType_Wlan3G:
    case NetType_Wlan4G:
    case NetType_Unreachable:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ConnMeta

@implementation ConnMeta

@dynamic hasUid, uid;
@dynamic hasDeviceType, deviceType;
@dynamic hasVersion, version;
@dynamic hasDeviceInfo, deviceInfo;
@dynamic hasSessionId, sessionId;
@dynamic hasClientFlag, clientFlag;
@dynamic hasAuthVersion, authVersion;
@dynamic hasLuaVersion, luaVersion;
@dynamic hasServerPkVersion, serverPkVersion;
@dynamic hasPublicKey, publicKey;
@dynamic hasNetType, netType;
@dynamic hasClientTime, clientTime;
@dynamic hasLa, la;

typedef struct ConnMeta__storage_ {
  uint32_t _has_storage_[1];
  ConnMeta_DeviceType deviceType;
  int32_t version;
  int32_t authVersion;
  int32_t luaVersion;
  int32_t serverPkVersion;
  NetType netType;
  NSString *uid;
  NSString *deviceInfo;
  NSString *sessionId;
  NSString *clientFlag;
  NSData *publicKey;
  NSString *la;
  int64_t clientTime;
} ConnMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = ConnMeta_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, uid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = ConnMeta_DeviceType_EnumDescriptor,
        .number = ConnMeta_FieldNumber_DeviceType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = ConnMeta_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "deviceInfo",
        .dataTypeSpecific.className = NULL,
        .number = ConnMeta_FieldNumber_DeviceInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, deviceInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = ConnMeta_FieldNumber_SessionId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientFlag",
        .dataTypeSpecific.className = NULL,
        .number = ConnMeta_FieldNumber_ClientFlag,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, clientFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authVersion",
        .dataTypeSpecific.className = NULL,
        .number = ConnMeta_FieldNumber_AuthVersion,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, authVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "luaVersion",
        .dataTypeSpecific.className = NULL,
        .number = ConnMeta_FieldNumber_LuaVersion,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, luaVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "serverPkVersion",
        .dataTypeSpecific.className = NULL,
        .number = ConnMeta_FieldNumber_ServerPkVersion,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, serverPkVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "publicKey",
        .dataTypeSpecific.className = NULL,
        .number = ConnMeta_FieldNumber_PublicKey,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, publicKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "netType",
        .dataTypeSpecific.enumDescFunc = NetType_EnumDescriptor,
        .number = ConnMeta_FieldNumber_NetType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, netType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "clientTime",
        .dataTypeSpecific.className = NULL,
        .number = ConnMeta_FieldNumber_ClientTime,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, clientTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "la",
        .dataTypeSpecific.className = NULL,
        .number = ConnMeta_FieldNumber_La,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ConnMeta__storage_, la),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConnMeta class]
                                     rootClass:[BibiProtocolRoot class]
                                          file:BibiProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConnMeta__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\002\n\000\004\n\000\005\t\000\006\n\000\007\013\000\010\n\000\t\017\000\n\t\000\013\007\000\014\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ConnMeta_DeviceType

GPBEnumDescriptor *ConnMeta_DeviceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Ios\000Android\000";
    static const int32_t values[] = {
        ConnMeta_DeviceType_Unknown,
        ConnMeta_DeviceType_Ios,
        ConnMeta_DeviceType_Android,
    };
    static const char *extraTextFormatInfo = "\002\000\007\000\002\007\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ConnMeta_DeviceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ConnMeta_DeviceType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ConnMeta_DeviceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ConnMeta_DeviceType_Unknown:
    case ConnMeta_DeviceType_Ios:
    case ConnMeta_DeviceType_Android:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ConnStatusPacket

@implementation ConnStatusPacket

@dynamic hasCode, code;
@dynamic hasConnToken, connToken;
@dynamic hasFeedback, feedback;
@dynamic accessPointsArray, accessPointsArray_Count;
@dynamic hasClientTime, clientTime;

typedef struct ConnStatusPacket__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *connToken;
  NSString *feedback;
  NSMutableArray *accessPointsArray;
  int64_t clientTime;
} ConnStatusPacket__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = ConnStatusPacket_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConnStatusPacket__storage_, code),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "connToken",
        .dataTypeSpecific.className = NULL,
        .number = ConnStatusPacket_FieldNumber_ConnToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConnStatusPacket__storage_, connToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "feedback",
        .dataTypeSpecific.className = NULL,
        .number = ConnStatusPacket_FieldNumber_Feedback,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConnStatusPacket__storage_, feedback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accessPointsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ConnStatusPacket_Point),
        .number = ConnStatusPacket_FieldNumber_AccessPointsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ConnStatusPacket__storage_, accessPointsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientTime",
        .dataTypeSpecific.className = NULL,
        .number = ConnStatusPacket_FieldNumber_ClientTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ConnStatusPacket__storage_, clientTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConnStatusPacket class]
                                     rootClass:[BibiProtocolRoot class]
                                          file:BibiProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConnStatusPacket__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\t\000\004\000accessPoints\000\005\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConnStatusPacket_Point

@implementation ConnStatusPacket_Point

@dynamic hasHostport, hostport;
@dynamic hasWeight, weight;

typedef struct ConnStatusPacket_Point__storage_ {
  uint32_t _has_storage_[1];
  int32_t weight;
  NSString *hostport;
} ConnStatusPacket_Point__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hostport",
        .dataTypeSpecific.className = NULL,
        .number = ConnStatusPacket_Point_FieldNumber_Hostport,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConnStatusPacket_Point__storage_, hostport),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.className = NULL,
        .number = ConnStatusPacket_Point_FieldNumber_Weight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConnStatusPacket_Point__storage_, weight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConnStatusPacket_Point class]
                                     rootClass:[BibiProtocolRoot class]
                                          file:BibiProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConnStatusPacket_Point__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ConnStatusPacket)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KickPacket

@implementation KickPacket

@dynamic hasUid, uid;
@dynamic hasRemoteHostPort, remoteHostPort;
@dynamic hasVersion, version;
@dynamic hasUsession, usession;
@dynamic hasCsp, csp;

typedef struct KickPacket__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
  NSString *remoteHostPort;
  NSData *usession;
  ConnStatusPacket *csp;
  int64_t version;
} KickPacket__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = KickPacket_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KickPacket__storage_, uid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remoteHostPort",
        .dataTypeSpecific.className = NULL,
        .number = KickPacket_FieldNumber_RemoteHostPort,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KickPacket__storage_, remoteHostPort),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = KickPacket_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(KickPacket__storage_, version),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "usession",
        .dataTypeSpecific.className = NULL,
        .number = KickPacket_FieldNumber_Usession,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(KickPacket__storage_, usession),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "csp",
        .dataTypeSpecific.className = GPBStringifySymbol(ConnStatusPacket),
        .number = KickPacket_FieldNumber_Csp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(KickPacket__storage_, csp),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KickPacket class]
                                     rootClass:[BibiProtocolRoot class]
                                          file:BibiProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KickPacket__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Heartbeat

@implementation Heartbeat

@dynamic hasTimestamp, timestamp;
@dynamic hasVersion, version;

typedef struct Heartbeat__storage_ {
  uint32_t _has_storage_[1];
  int32_t version;
  int64_t timestamp;
} Heartbeat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = Heartbeat_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Heartbeat__storage_, timestamp),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = Heartbeat_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Heartbeat__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Heartbeat class]
                                     rootClass:[BibiProtocolRoot class]
                                          file:BibiProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Heartbeat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Sync

@implementation Sync

@dynamic hasUid, uid;
@dynamic hasVersion, version;

typedef struct Sync__storage_ {
  uint32_t _has_storage_[1];
  int32_t version;
  NSString *uid;
} Sync__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = Sync_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Sync__storage_, uid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = Sync_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Sync__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Sync class]
                                     rootClass:[BibiProtocolRoot class]
                                          file:BibiProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Sync__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Logout

@implementation Logout

@dynamic hasUid, uid;
@dynamic hasVersion, version;

typedef struct Logout__storage_ {
  uint32_t _has_storage_[1];
  int32_t version;
  NSString *uid;
} Logout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = Logout_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Logout__storage_, uid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = Logout_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Logout__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Logout class]
                                     rootClass:[BibiProtocolRoot class]
                                          file:BibiProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Logout__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
